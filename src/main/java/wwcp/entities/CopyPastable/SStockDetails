//This is a documentation file for copy pasting into a steam locomotive.

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import ebf.tim.TrainsInMotion.transportTypes;
import ebf.tim.api.SkinRegistry;
import ebf.tim.api.TrainBase;
import ebf.tim.items.ItemTransport;
import ebf.tim.models.Bogie;
import ebf.tim.registry.URIRegistry;
import ebf.timsquared.TiMSquared;
import ebf.timsquared.models.trains.ModelBrigadelok_080;
import fexcraft.tmt.slim.ModelBase;
import java.util.List;
import java.util.UUID;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntityFurnace;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import net.minecraftforge.common.util.ForgeDirection;
import net.minecraftforge.fluids.FluidContainerRegistry;
import net.minecraftforge.fluids.FluidRegistry;

public class EntityXXXXX extends TrainBase {
    public static final Item thisItem;

    public EntityXXXXXXXX(UUID owner, World world, double xPos, double yPos, double zPos) {
        super(owner, world, xPos, yPos, zPos);
    }

    public static final Item thisItem = new ItemTransport(new EntityXXXXX(null), worldwidecontentpack.MODID , worldwidecontentpack.XXXXXX);

    public EntityXXXXXX(World world) {
        super(world);
    }

    public String transportName() {
        return "Henschel Brigadelok";
    }

    public String transportcountry() {
        return "Germany";
    }

    public String transportYear() {
        return "1918";
    }

    public String transportFuelType() {
        return "Steam";
    }

    public boolean isFictional() {
        return false;
    }

    public float transportTractiveEffort() {
        return 0.0F;
    }

    public float transportMetricHorsePower() {
        return 75.0F;
    }

    public String[] additionalItemText() {
        {return new String[]{RailUtility.translate("wwcp.era") + "II"};}
    }

    public float weightKg() {
        return 10886.217F;
    }

    public void registerSkins() {
        SkinRegistry.addSkin(this.getClass(), "trainsinmotion", "textures/sd/train/brigadelok_080.png", "default", "Used by Germany in WWI as a transport for solders and equipment");
        SkinRegistry.addSkinRecolor(this.getClass(), "trainsinmotion", "textures/sd/train/brigadelok_080.png", new int[][]{new int[0], new int[0]}, "purple", "A fictional skin created for testing the recolor system, \nthe gui multi-line support and the paint bucket skin selector. \n Might keep it longrun to pay hommage to the development of the mod.");
    }

    public float transportTopSpeed() {
        return 70.81F;
    }

    public List<Double> getRenderBogieOffsets() {
        return null;
    }

    public int getInventoryRows() {
        return 1;
    }

    public transportTypes getType() {
        return transportTypes.STEAM;
    }

    public float getMaxFuel() {
        return 1.0F;
    }

    public float[][] getRiderOffsets() {
        return new float[][]{{1.3F, 1.2F, 0.0F}};
    }

    public float[] getHitboxSize() {
        return new float[]{3.6F, 2.1F, 1.3F};
    }

    public ItemStack[] getRecipie() {
        return new ItemStack[]{null, null, null, null, null, null, null, null, null};
    }

    public double[][] getHitboxPositions() {
        return new double[][]{{-1.75D, 0.25D, 0.0D}, {-1.15D, 0.25D, 0.0D}, {0.0D, 0.25D, 0.0D}, {1.15D, 0.25D, 0.0D}, {1.75D, 0.25D, 0.0D}};
    }

    public float getPistonOffset() {
        return 0.5F;
    }

    public float[][] getSmokeOffset() {
        return new float[][]{{-1.0F, 0.0F, 0.5F, 1.1711154E7F, 30.0F}, {-1.0F, 0.0F, -0.5F, 1.1711154E7F, 30.0F}, {-1.4F, 2.0F, 0.0F, 3947580.0F, 500.0F}};
    }

    public float[][] bogieModelOffsets() {
        return new float[][]{{1.3F, 0.0F, 0.0F}, {-1.3F, 0.0F, 0.0F}};

    }

    public ModelBase[] bogieModels() {
         return new ModelBase[]{new xxxxxx()};
    }

    public float[] bogieLengthFromCenter() {
        return new float[]{1.0F, 0.1F};
    }

    public float getRenderScale() {
        return 0.0625F;
    }

    public float[][] modelOffsets() {
        return (float[][])null;
    }

    public boolean shouldRiderSit() {
        return false;
    }

    public boolean isReinforced() {
        return false;
    }

    public int[] getTankCapacity() {
        return new int[]{9161, 800};
    }

    public int getRFCapacity() {
        return 0;
    }

    public String[] getTankFilters(int tank) {
        switch(tank) {
        case 0:
            return new String[]{FluidRegistry.WATER.getName()};
        default:
            return new String[]{FluidRegistry.LAVA.getName()};
        }
    }

    public boolean func_94041_b(int slot, ItemStack stack) {
        switch(slot) {
        case 400:
            return TileEntityFurnace.func_145952_a(stack) > 0;
        case 401:
            return FluidContainerRegistry.getFluidForFilledItem(stack) != null && this.canFill((ForgeDirection)null, FluidContainerRegistry.getFluidForFilledItem(stack).getFluid());
        default:
            return true;
        }
    }

    public void manageFuel() {
        this.fuelHandler.manageSteam(this);
    }

    public Item getItem() {
        return thisItem;
    }

    public ModelBase[] getModel() {
        return new ModelBase[]{new xxxxxxxx()};
    }

    @SideOnly(Side.CLIENT)
    public ResourceLocation getHorn() {
        return URIRegistry.SOUND_HORN.getResource("XXXXXXXXXX.ogg");
    }

    @SideOnly(Side.CLIENT)
    public ResourceLocation getRunningSound() {
        return URIRegistry.SOUND_RUNNING.getResource("XXXXXXX.ogg");
    }